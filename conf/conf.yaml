#
# File: conf.yaml
# Description: This file is read by pycollector to
#              configure readers/writers.
#              This file is supposed to be divided
#              in two sections: specs, conf
#
# specs: map names to specific configurations
#        Everything defined inside a spec is replaced where
#        it is being used (see conf section).
#
# conf:  List of pairs (reader, writer)
#        Since it is natural to have same specifications for readers/writers
#        it is encouraged to use specs.
#
#        A reader/writer must have a type.
#        A reader/writer may have a checkpoint path.
#        A reader/writer may present a period (in seconds) property.
#
#


specs:
#Mysql example
  mysqldb:
    type: dbwriter
    database: test
    host: localhost
    user: root
    passwd: 'root'
    connection: 'mysql+mysqldb://%s:%s@%s/%s'

#MTR
  mtr:
    type: mtr

#Sqlserver example
  sqlserverdb:
    type: db
    database: master
    host: localhost\\sqlexpress
    user: ''
    passwd: ''
    connection: 'mssql+pyodbc://%s:%s@%s/%s'

#Activemq example
  activemq:
   type: activemq
   host: '127.0.0.1'
   port: 61613
   destination: '/queue/events'
   user: 'system'
   passcode: 'manager'

  activemqssl:
   type: activemq
   host: '127.0.0.1'
   port: 61612
   user: 'system'
   passcode: 'manager'
   use_ssl: true
   ssl_trust: '/home/juanplopes/Downloads/client.pem'
   destination: '/queue/events'

#Log example
  log:
    type: log
    delimiter: '\t'
    columns : [col1, col2]

#Gtalk example
  gtalkbot:
    type: gtalk
    login: gmailusername
    passwd: gmailpassword
    destination: destination@gmail.com


conf:
#Reading from stdin and writing to stdout
#- reader:
    #type: stdin
  #writer:
    #type: stdout

# Reading from an nginx log and delivering to activemq
#- reader:
#    type: custom_log
#    logpath: /var/log/nginx/foo/sa/AZ.0058b.log
#    delimiter: \t
#    columns: [request_time, host, remote_addr, time_local, request, status, request_method, bytes_sent, request_uri, http_user_agent, http_referer, upstream_cache_status]
#    datetime_column: time_local
#    counts:
#        - column: request_method
#          match: 'GET'
#          period: 1
#          groupby:
#            column: host
#            match: '(.*)'
#        - column: status
#          match: 200
#          period: 1
#          groupby:
#            column: host
#            match: '(.*)'
#        - column: status
#          match: 404
#          period: 1
#          groupby:
#            column: host
#            match: '(.*)'
#        - column: status
#          match: 500
#          period: 1
#          groupby:
#            column: host
#            match: '(.*)'
#    sums:
#        - column: bytes_sent
#          period: 1
#          groupby:
#            column: host
#            match: '(.*)'
#    checkpoint_enabled: True
#    checkpoint_path: /tmp/rnginxcheckpoint
#    checkpoint_period: 20
#    blockable: True
#  writer:
#    spec: activemq
#    eventtype: test
#    checkpoint_enabled: True
#    checkpoint_path: /tmp/wnginxcheckpoint
#    checkpoint_period: 20
#    blockable: True

# Reading from a wowza log and delivering to activemq
#- reader:
#    type: custom_log
#    logpath: /var/log/wowza/foo/ls/AZ.0035c.log.2012-03-05-14
#    delimiter: \t
#    columns: [x-severity, x-category, x-event, tz, date, time, c-client-id, c-ip, c-port, cs-bytes, sc-bytes, x-duration, x-sname, x-stream-id, x-spos, sc-stream-bytes, cs-stream-bytes, x-file-size, x-file-length, x-ctx, x-comment, c_proto, c_referrer, c_user_agent, x-app, x-suri]
#    date_column: date
#    time_column: time
#    sums:
#        - column: sc-bytes
#          period: 1
#          groupby:
#            column: 'x-suri'
#            match: '^.*//(.*azioncdn.net)'
#        - column: cs-bytes
#          period: 1
#          groupby:
#            column: 'x-suri'
#            match: '^.*//(.*azioncdn.net)'
#    checkpoint_enabled: True
#    checkpoint_path: /tmp/rwowzacheckpoint
#    checkpoint_period: 20
#    blockable: True
#  writer:
#    spec: activemq
#    eventtype: test
#    checkpoint_enabled: True
#    checkpoint_path: /tmp/wwowzacheckpoint
#    checkpoint_period: 20
#    blockable: True



#Reading from an nginx/wowza log and writing to activemq
#- reader:
#    type: log_analytics
#    logpath: /var/log/nginx/sa/AZ.0058b.log
#    delimiter: \t
#    columns: [request_time, host, remote_addr, time_local, request, status, request_method, bytes_sent, request_uri, http_user_agent, http_referer, upstream_cache_status]
#    counts:
#      #column : period (in minutes)
#      request_method: ['GET', 1] #count GET's in 'request_method' column in 1 minute period
#      status: ['200', 1]
#    sums:
#      #column : period (in minutes)
#      bytes_sent: 1
#    checkpoint_enabled: True
#    checkpoint_path: /tmp/rAZ.0058b.log
#    checkpoint_period: 10
#  writer:
#    spec: activemq
#    eventtype: nginx
#    blockable: True
#    retry_period: 5
#    retry_timeout: 7200
#    checkpoint_enabled: True
#    checkpoint_path: /tmp/wAZ.0058b.log
#    checkpoint_period: 10

#- reader:
#    type: log_analytics
#    logpath: /var/log/wowza/ls/AZ.0041b.log
#    delimiter: \t
#    columns: [x-severity, x-category, x-event, tz, date, time, c-client-id, c-ip, c-port, cs-bytes, sc-bytes, x-duration, x-sname, x-stream-id, x-spos, sc-stream-bytes, sc-stream-bytes, x-file-size, x-file-length, x-ctx, x-comment, c_proto, c_referrer, c_user_agent, x-app, x-suri]
#    sums:TÃ¡ escrito :P 
#        #column : period (in minutes)
#        cs-bytes : 1
#        sc-bytes : 1
#    checkpoint_enabled: True
#    checkpoint_path: /tmp/rAZ.0041b.log
#    checkpoint_period: 10
#  writer:
#    spec: activemq
#    eventtype: wowza
#    blockable: True
#    retry_period: 5
#    retry_timeout: 7200
#    checkpoint_enabled: True
#    checkpoint_path: /tmp/wAZ.0041b.log

#Reading from arduino and writing in file
#- reader:
#    type: arduino
#    interface: /dev/ttyUSB0
#    bps: 9600
#  writer:
#    type: file
#    filepath: /tmp/data

#Reading from your camera and writing to a jpg file
#- reader:
#    type: cam
#    cam_number: 2
#    period: 5
#  writer:
#    path: /tmp/data
#    prefix: microsoftcam
#    type: cam
#
#- reader:
#    type: cam
#    cam_number: 1
#    period: 60
#  writer:
#    path: /tmp/data
#    type: cam
#    prefix: cam

#Reading from a database and writing to activemq
#- reader:
#    queue_maxsize: 10
#    type: db
#    database: lognit
#    host: localhost
#    user: root
#    passwd: ''
#    connection: 'mysql+mysqldb://%s:%s@%s/%s'
#    period: 5
#    query: select display_name, email from web_user
#    columns: [display_name, email]
#  writer:
#    type: activemq
#    host: localhost
#    port: 61613
#    destination: '/queue/events'

- reader:
    queue_maxsize: 10
    type: db
    database: lognit
    host: localhost
    user: root
    passwd: ''
    connection: 'mysql+mysqldb://%s:%s@%s/%s'
    period: 5
    query: select display_name, email from web_user
    columns: [display_name, email]
    checkpoint_path: /tmp/mysqlreader.chp
  writer:
    type: stdout
    checkpoint_path: /tmp/stdout.chp

#- reader:
#    type: mtr
#    host: 8.8.8.8
#    period: 10
#  writer:
#    spec: activemq
#    eventtype: mtr
#    period: 0

#Reading from a log file and writing to activemq
#- reader:
#    queue_maxsize: 10
#    spec: log
#    logpath: '/tmp/test.log'
#  writer:
#    type: activemq
#    host: demo.intelie.net
#    port: 61613
#    destination: '/queue/events'

#Reading from stdin and writing to a file
#- reader:
#    type: stdin
#  writer:
#    type: file
#    filepath: /tmp/test.log

#Reading from stdin and writing to a gtalk account
#- reader:
#    type: stdin
#  writer:
#    type: gtalk
#    login: montypythonfoo
#    passwd: replace_with_your_password
#    destination: user@gmail.com

